self:
{ pkgs, config, lib, ... }:

with lib;

let
  cfg = config.services.packaway;

in {
  options.services.packaway = {
    enable = mkEnableOption "Packaway";

    secretKey = mkOption {
      description = ''
        Path to the secret signing key.

        A key can be generated by running
        <literal>nix-store --generate-binary-cache-key hostname secret-key-file public-key-file</literal>.
      '';
      type = types.path;
      example = "/var/lib/packaway/private";
    };
  };

  config.systemd.services.packaway = mkIf cfg.enable {
    description = "Packaway Nix substitution server";

    wantedBy = [ "default.target" ];

    environment = {
      ROCKET_PORT = "19082";
      ROCKET_DATABASES = ''{ nix = { url = "/nix/var/nix/db/db.sqlite" } }'';
      NIX_SECRET_KEY_FILE = cfg.secretKey;
    };

    serviceConfig = {
      ExecStart = "${self.packages.${pkgs.system}.default}/bin/packaway";

      NoNewPrivileges = true;
      PrivateDevices = true;
      PrivateIPC = true;
      PrivateMounts = true;
      PrivateTmp = true;
      PrivateUsers = true;
      ProtectClock = true;
      ProtectControlGroups = true;
      ProtectHome = true;
      ProtectHostname = true;
      ProtectKernelLogs = true;
      ProtectKernelModules = true;
      ProtectKernelTunables = true;
      ProtectSystem = "strict";
      RestrictNamespaces = "";
      ExecPaths = [ "/nix/store" ];
      ReadOnlyPaths = [ "/nix/store" cfg.secretKey ];
      ReadWritePaths = [ "/nix/var/nix/db" ];
    };
  };
}
